set exrc
set guicursor=
set relativenumber
set hidden
set nohlsearch
set number
set cursorline
set showmatch
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set nu
set smartindent
set nowrap
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set termguicolors
set scrolloff=8
set noshowmode
set signcolumn=yes
set colorcolumn=120
set splitbelow
"silent pattern not found in compe
set shortmess+=c
set completeopt=menu,menuone,noselect
let g:completetion_matching_strategy_list = ['fuzzy', 'substring', 'exact']
set splitbelow
set splitright
set list
set listchars=tab:»·,eol:↲,nbsp:␣,space:·

set updatetime=50

let mapleader = " "

set background=dark
highlight Normal guibg=dark

filetype plugin indent on
syntax on

call plug#begin('~/.config/nvim/plugged')
Plug 'ziglang/zig.vim'
Plug 'nvim-lua/plenary.nvim'
Plug 'dstein64/vim-startuptime'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'nvim-lualine/lualine.nvim'
Plug 'vim-pandoc/vim-pandoc'
Plug 'gruvbox-community/gruvbox'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/playground'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'nvim-lua/popup.nvim'
Plug 'lewis6991/gitsigns.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'
Plug 'onsails/lspkind-nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/nvim-cmp'
Plug 'rhysd/committia.vim'
Plug 'nvim-neorg/neorg'
call plug#end()

colorscheme gruvbox

lua <<EOF

--- require('william')

--- W.test()

local M = {}
M.term_id = nil

function QuickTerm()
    if not M.term_id then
        vim.cmd [[10new]]
        cwd = vim.fn.getcwd()
        M.term_id = vim.fn.termopen("/bin/zsh")
    else
        -- does this work ?
        vim.fn.win_execute(M.term_id, "close")
    end

    vim.wait(100, function() return false end)
end

--- Do all the plugin setup here
require('gitsigns').setup()

require'nvim-web-devicons'.setup {
    default = true
}

local function current_file()
    return vim.fn.expand("%")
end

--- Lualine setup
require('lualine').setup {
    options = { theme = 'gruvbox' },
    sections = { lualine_c = { current_file } }
}

--- Treesitter config
local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

parser_configs.norg = {
    install_info = {
        url = "https://github.com/nvim-neorg/tree-sitter-norg",
        files = { "src/parser.c", "src/scanner.cc" },
        branch = "main"
    },
}

require('nvim-treesitter.configs').setup {
    ensure_install = { "c99", "c++", "html", "java", "kotlin", "go", "javascript", "typescript", "python", "norg", "zig" },
    ignore_install = {},
    highlight = {
        enable = true,
        ident = true
    },
    playground = {
        enable = true
    }
}

--- Telescope setup
require('telescope').setup {
    defaults = {
        file_sorter = require('telescope.sorters').get_fzy_sorter,
        prompt_prefix = '> ',
        color_devicons = true,

        file_previewer = require('telescope.previewers').vim_buffer_cat.new,
        grep_previewer = require('telescope.previewers').vim_buffer_vimgrep.new,
        qflist_previewer = require('telescope.previewers').vim_buffer_qflist.new,
    },
    extensions = {
        fzy_native = {
            override_generic_sorter = false,
            override_file_sorter = true,
        }
    }
}


require('telescope').load_extension('fzy_native')

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.resolveSupport = {
    properties = {
        'documentation',
        'detail',
        'additionalTextEdits',
    }
}

-- LSPConfig setup
local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    -- Enable completion triggered by <C-x><C-o>
    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    local opts = { noremap=true, silent=true }

    buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gi', '<Cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', '<C-k>', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', '<space>rn', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<space>ca', '<Cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('n', '<space>e', '<Cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    buf_set_keymap('n', '[d', '<Cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', ']d', '<Cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<space>q', '<Cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
    buf_set_keymap('n', '<space>f', '<Cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

--- nvim-cmp setup
local lspkind = require('lspkind')
local cmp = require'cmp'
cmp.setup({
    mapping = {
        ['<C-d>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.close(),
        ['<C-k>'] = cmp.mapping.confirm({ select = true }),
    },
    formatting = {
        format = lspkind.cmp_format({with_text = false, maxwidth = 50})
    },
    sources = {
        { name = 'nvim_lsp' },
        { name = "path" },
        { name = "neorg" },
        { name = 'buffer' },
    }
})

--- LSP setup
local servers = { "pyright", "gopls","clangd","tsserver", "zls" }
for _, lsp in ipairs(servers) do
    require('lspconfig')[lsp].setup(
    {
            capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities()),
            on_attach = on_attach }
    )
end

--- Neorg setup
require('neorg').setup {
    load = {
        ["core.defaults"] = {},
        ["core.norg.concealer"] = {},
        ["core.norg.completion"] = {
            config = {
                engine = "nvim-cmp"
            }
        },
        ["core.norg.dirman"] = {
            config = {
                workspaces = {
                    my_workspace = "$SRC/neorg"
                },
            },
        },
    }
}

EOF



nnoremap <TAB> :tabn<CR>
nnoremap <S-TAB> :tabp<CR>
nnoremap <leader><CR> :so ~/.config/nvim/init.vim<CR>
nnoremap <leader>cd :lcd %:p:h<CR>
nnoremap <leader>fp <cmd>lua require('telescope.builtin').file_browser({ cwd = "$SRC", depth = 1 })<cr>
nnoremap <leader>ff <cmd>:lua require('telescope.builtin').find_files(require('telescope.themes').get_dropdown({previewer=false, layout_config={width=0.65}}))<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
nnoremap <leader>gf <cmd>lua require('telescope.builtin').git_files()<cr>
nnoremap <leader>df <cmd>lua require('telescope.builtin').git_files( { cwd = "$SRC/dotfiles" } )<cr>
vnoremap <leader>y "+y
" LSP Telescope
nnoremap <leader>fd <cmd>lua require('telescope.builtin').lsp_document_symbols()<cr>

" Terminal mappings
nnoremap <C-T> <cmd>lua QuickTerm()<cr>
tnoremap <ESC> <C-\><C-n>

let g:airline#extensions#syntastic#enabled = 1

augroup BURMUDAR
    autocmd!
    autocmd BufWritePre * %s/\s\+$//e
augroup END
